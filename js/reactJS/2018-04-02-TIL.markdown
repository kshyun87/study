# UI컴포넌트 제어
직접 구현해서 사용해도 되지만
React는 다른 사람이 만들어둔 UI컴포넌트를 가져와서 사용해도 무방합니다.

기존 HTML css처럼 부트스트랩과 같이 스타일이 적용되어진 컴포넌트들이 있고 그중 맘에 드는 것을 사용하면 됩니다.

material-UI 컴포넌트의 경우 구글 안드로이드 화면과 같은 UI로 모바일도 지원되기에 편리하게 적용하여 사용할 수 있습니다.

이런 컴포넌트가 아니라면 자신이 직접 컴포넌트를 만들고 css를 적용시켜서 배포할 수도 있습니다.

# 프런트엔드 개발

## 프런트 엔드(Front-end)?
데이터 출력, 입력을 위한 구조이며 사용자와 대화하는 사용자 인터페이스(UI)


## 데스크톱 앱을 만들기 위한 일렉트론(electron)
일렉트론은 크로스 플랫폼을 지원하는 데스크톱 애플리케이션 개발 엔진입니다.

JS와 HTML을 가지고 PC App을 만들 수 있습니다. C나 Java를 몰라도 말이죠.

일렉트론은 Node.js와 크로미움(Chromium)으로 구성되어 있습니다.
크로미움은 크롬 브라우저의 오픈소스라고 합니다.

일렉트론을 사용하면 웹 개발자도 데스크탑 앱을 만들 수 있는 장점이 있지만 웹브라우저 엔진을 탑재했기에 일반적인 데스크탑 앱보다 용량이 크다는 단점이 있습니다.

## 스마트폰 앱 - React-Native
스마트폰 앱도 만들 수 있습니다.
React-Native를 이용하면 React기반으로 구성된 앱을 만들 수 있습니다.
OS 네이티브 컴포넌트(OS에서 지원하는 녀석)을 자바스크립트로 사용할 수 있게 해주므로 폰캡 등 보다 빠른 성능을 보장할 수 있습니다. 그래서 이름이 네이티브인듯 합니다.
단, OS에 따라서 개발할 수 있는 앱이 달라집니다. IOS는 무조건 OSX가 필요하므로 MacOS환경에서 개발을 진행해야합니다.

## 일렉트론의 구조

### 왜 분리한 걸까?
메인과 렌더러가 사용하는 API의 차이 떄문.
렌더러 프로세스는 Web 컴텐츠를 읽어서 실행.
파일 시스템과 같은 PC를 제어하는 기능을 차단. 웹을 통해 pc를 제어하면 문제가 되기 때문.

# React-Native
스마트폰 앱을 만들기 위해서 기존 하이브리드 앱은 web view방식을 사용했지만 react-native는 os 네이티브 컴포넌트를 사용하여 비동기적으로 동작하도록만들어 딜레이가 줄어 빠른 실행을 보장합니다.

# SPA(SinglePage Application)과 기존 방식의 차이는?
SPA란 말 그대로 단일 웹 페이지 앱을 의미합니다.
즉 한 화면에서 부분 렌더링으로 변화를 일으키는 것이죠.
기존 웹 애플리케이션은 화면을 변경하기 위해서는 매번 서버와 통신을 해서 html파일을 가져오든가 했습니다.
SPA는 필요할 때만 통신을 합니다.

즉 기존보다 빠르다는 것과 통신 비용이 준다는 것이 장점이겠죠. 그러나 단점도 있습니다.
여러 모듈을 불러서 하나의 페이지로 만들기 때문에 초기 구성하는데 시간이 필요합니다. 그러나 한번 구성된 페이지를 부분 부분 변경할때는 속도가 빠릅니다.
즉 초기 실행이 느린 단점이 있지만 이후 속도는 빠르다는 장점이 공존하는 방식입니다.

리엑트 - user와 대화하는 역할
서버 = 리엑트에 필요한 API를 제공.
API? : sw의 기능 또는 데이터등을 외부에서 사용할 수 있도록 만드는 것.


#express 파일 업로드
multer모듈을 이용한 업로드

# NeDB
MongoDB와 유사한 NoSQL DB로 sqlite3와 같이 파일 기반의 DB
따로 설치할 필요없이 npm으로 설치하면 됨.
